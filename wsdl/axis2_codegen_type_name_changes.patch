Index: modules/adb-codegen/src/org/apache/axis2/schema/template/CADBBeanTemplateSource.xsl
===================================================================
--- modules/adb-codegen/src/org/apache/axis2/schema/template/CADBBeanTemplateSource.xsl	(revision 1149483)
+++ modules/adb-codegen/src/org/apache/axis2/schema/template/CADBBeanTemplateSource.xsl	(working copy)
@@ -96,7 +96,7 @@
 
         struct <xsl:value-of select="$axis2_name"/>
         {
-            axis2_char_t *property_Type;
+            axis2_char_t *property_TypeName;
 
             <xsl:if test="not($istype)">
                 axutil_qname_t* qname;
@@ -224,7 +224,7 @@
 
             memset(<xsl:value-of select="$name"/>, 0, sizeof(<xsl:value-of select="$axis2_name"/>_t));
 
-            <xsl:value-of select="$name"/>->property_Type = axutil_strdup(env, "<xsl:value-of select="$axis2_name"></xsl:value-of>");
+            <xsl:value-of select="$name"/>->property_TypeName = axutil_strdup(env, "<xsl:value-of select="$axis2_name"></xsl:value-of>");
             <xsl:for-each select="property">
                 <xsl:variable name="CName"><xsl:value-of select="@cname"></xsl:value-of></xsl:variable>
                 <xsl:choose>
@@ -364,7 +364,7 @@
             <xsl:choose>
             <xsl:when test="@type = 'yes'">
             return axis2_extension_mapper_free(
-                (adb_type_t*) <xsl:value-of select="$name"/>,
+                (adb_stubtype_t*) <xsl:value-of select="$name"/>,
                 env,
                 "<xsl:value-of select="$axis2_name"/>");
             </xsl:when>
@@ -390,9 +390,9 @@
             AXIS2_ENV_CHECK(env, AXIS2_FAILURE);
             AXIS2_PARAM_CHECK(env->error, <xsl:value-of select="$name"/>, AXIS2_FAILURE);
 
-            if (<xsl:value-of select="$name"/>->property_Type != NULL)
+            if (<xsl:value-of select="$name"/>->property_TypeName != NULL)
             {
-              AXIS2_FREE(env->allocator, <xsl:value-of select="$name"/>->property_Type);
+              AXIS2_FREE(env->allocator, <xsl:value-of select="$name"/>->property_TypeName);
             }
 
             <xsl:for-each select="property">
@@ -1050,7 +1050,7 @@
             <xsl:choose>
             <xsl:when test="@type = 'yes'">
             return axis2_extension_mapper_deserialize(
-                (adb_type_t*) <xsl:value-of select="$name"/>,
+                (adb_stubtype_t*) <xsl:value-of select="$name"/>,
                 env,
                 dp_parent,
                 dp_is_early_node_valid,
@@ -3620,7 +3620,7 @@
             else
             {
                 return axis2_extension_mapper_serialize(
-                    (adb_type_t*) <xsl:value-of select="$name"/>, env, parent, parent_element, parent_tag_closed, namespaces, next_ns_index, "<xsl:value-of select="$axis2_name"/>");
+                    (adb_stubtype_t*) <xsl:value-of select="$name"/>, env, parent, parent_element, parent_tag_closed, namespaces, next_ns_index, "<xsl:value-of select="$axis2_name"/>");
             }
             </xsl:when>
             <xsl:otherwise>
@@ -3647,13 +3647,11 @@
          
          axiom_node_t* current_node = NULL;
          int tag_closed = 0;
-         <xsl:if test="@type or $isUnion">
          axis2_char_t* xsi_prefix = NULL;
-         </xsl:if>
-         <xsl:if test="@type">
-         axis2_char_t* type_attrib = NULL;
          axiom_namespace_t* xsi_ns = NULL;
          axiom_attribute_t* xsi_type_attri = NULL;
+         <xsl:if test="@type">
+         axis2_char_t* type_attrib = NULL;
          </xsl:if>
          <!--now distinguise the properties specific to simple types -->
          <xsl:choose>
@@ -6627,7 +6625,7 @@
 
         struct adb_type
         {
-            axis2_char_t *property_Type;
+            axis2_char_t *property_TypeName;
         };
 
         /**
@@ -6692,15 +6690,15 @@
         }
 
         axis2_char_t* AXIS2_CALL
-        adb_type_get_type(const adb_type_t *object)
+        adb_internaltype_get_type(const adb_stubtype_t *object)
         {
             if (object != NULL)
-              return object->property_Type;
+              return object->property_TypeName;
 
             return NULL;
         }
 
-        adb_type_t* AXIS2_CALL
+        adb_stubtype_t* AXIS2_CALL
         axis2_extension_mapper_create_from_node(
             const axutil_env_t *env,
             axiom_node_t** node,
@@ -6713,7 +6711,7 @@
               <xsl:for-each select="type">
               if (axutil_strcmp(type, "<xsl:value-of select="@shortname"/>") == 0)
               {
-                  return (adb_type_t*) adb_<xsl:value-of select="@shortname"/>_create(env);
+                  return (adb_stubtype_t*) adb_<xsl:value-of select="@shortname"/>_create(env);
               }
               </xsl:for-each>
             }
@@ -6721,7 +6719,7 @@
             <xsl:for-each select="type">
             if (axutil_strcmp(default_type, "adb_<xsl:value-of select="@shortname"/>") == 0)
             {
-                return (adb_type_t*) adb_<xsl:value-of select="@shortname"/>_create(env);
+                return (adb_stubtype_t*) adb_<xsl:value-of select="@shortname"/>_create(env);
             }
             </xsl:for-each>
 
@@ -6730,14 +6728,14 @@
 
         axis2_status_t AXIS2_CALL
         axis2_extension_mapper_free(
-            adb_type_t* _object,
+            adb_stubtype_t* _object,
             const axutil_env_t *env,
             axis2_char_t *default_type)
         {
-            if (_object != NULL &amp;&amp; adb_type_get_type(_object) != NULL)
+            if (_object != NULL &amp;&amp; adb_internaltype_get_type(_object) != NULL)
             {
             <xsl:for-each select="type">
-                if (axutil_strcmp(adb_type_get_type(_object), "adb_<xsl:value-of select="@shortname"/>") == 0)
+                if (axutil_strcmp(adb_internaltype_get_type(_object), "adb_<xsl:value-of select="@shortname"/>") == 0)
                 {
                     return adb_<xsl:value-of select="@shortname"/>_free_obj(
                     (<xsl:value-of select="@classname"/>) _object, env);
@@ -6758,17 +6756,17 @@
 
         axis2_status_t AXIS2_CALL
         axis2_extension_mapper_deserialize(
-            adb_type_t* _object,
+            adb_stubtype_t* _object,
             const axutil_env_t *env,
             axiom_node_t** dp_parent,
             axis2_bool_t *dp_is_early_node_valid,
             axis2_bool_t dont_care_minoccurs,
             axis2_char_t *default_type)
         {
-            if (_object != NULL &amp;&amp; adb_type_get_type(_object) != NULL)
+            if (_object != NULL &amp;&amp; adb_internaltype_get_type(_object) != NULL)
             {
             <xsl:for-each select="type">
-                if (axutil_strcmp(adb_type_get_type(_object), "adb_<xsl:value-of select="@shortname"/>") == 0)
+                if (axutil_strcmp(adb_internaltype_get_type(_object), "adb_<xsl:value-of select="@shortname"/>") == 0)
                 {
                     return adb_<xsl:value-of select="@shortname"/>_deserialize_obj(
                     (<xsl:value-of select="@classname"/>) _object, env, dp_parent, dp_is_early_node_valid, dont_care_minoccurs);
@@ -6789,7 +6787,7 @@
 
         axiom_node_t* AXIS2_CALL
         axis2_extension_mapper_serialize(
-            adb_type_t* _object,
+            adb_stubtype_t* _object,
             const axutil_env_t *env,
             axiom_node_t* om_node,
             axiom_element_t *om_element,
@@ -6798,10 +6796,10 @@
             int *next_ns_index,
             axis2_char_t *default_type)
         {
-            if (_object != NULL &amp;&amp; adb_type_get_type(_object) != NULL)
+            if (_object != NULL &amp;&amp; adb_internaltype_get_type(_object) != NULL)
             {
                 <xsl:for-each select="type">
-                if (axutil_strcmp(adb_type_get_type(_object), "adb_<xsl:value-of select="@shortname"/>") == 0)
+                if (axutil_strcmp(adb_internaltype_get_type(_object), "adb_<xsl:value-of select="@shortname"/>") == 0)
                 {
                     return adb_<xsl:value-of select="@shortname"/>_serialize_obj(
                     (<xsl:value-of select="@classname"/>) _object, env, om_node, om_element, tag_closed, namespaces, next_ns_index);
Index: modules/adb-codegen/src/org/apache/axis2/schema/template/CADBBeanTemplateHeader.xsl
===================================================================
--- modules/adb-codegen/src/org/apache/axis2/schema/template/CADBBeanTemplateHeader.xsl	(revision 1149483)
+++ modules/adb-codegen/src/org/apache/axis2/schema/template/CADBBeanTemplateHeader.xsl	(working copy)
@@ -1101,7 +1101,7 @@
         {
         #endif
 
-        typedef struct adb_type adb_type_t;
+        typedef struct adb_type adb_stubtype_t;
 
         /**
          * Returns the type for an ADB object.
@@ -1109,7 +1109,7 @@
          * @return string with the object type
          */
         axis2_char_t* AXIS2_CALL
-        adb_type_get_type(const adb_type_t *object);
+        adb_internaltype_get_type(const adb_stubtype_t *object);
 
         /**
          * Will invoke the creation function for the appropriate type, given an Axiom node.
@@ -1118,7 +1118,7 @@
          * @param default_type string with the default type, in case the node has none
          * @return ADB object on success, else NULL
          */
-        adb_type_t* AXIS2_CALL
+        adb_stubtype_t* AXIS2_CALL
         axis2_extension_mapper_create_from_node(
             const axutil_env_t *env,
             axiom_node_t** node,
@@ -1133,7 +1133,7 @@
          */
         axis2_status_t AXIS2_CALL
         axis2_extension_mapper_free(
-            adb_type_t* _object,
+            adb_stubtype_t* _object,
             const axutil_env_t *env,
             axis2_char_t *default_type);
 
@@ -1150,7 +1150,7 @@
          */
         axis2_status_t AXIS2_CALL
         axis2_extension_mapper_deserialize(
-            adb_type_t* _object,
+            adb_stubtype_t* _object,
             const axutil_env_t *env,
             axiom_node_t** dp_parent,
             axis2_bool_t *dp_is_early_node_valid,
@@ -1171,7 +1171,7 @@
          */
         axiom_node_t* AXIS2_CALL
         axis2_extension_mapper_serialize(
-            adb_type_t* _object,
+            adb_stubtype_t* _object,
             const axutil_env_t *env,
             axiom_node_t* om_node,
             axiom_element_t *om_element,
